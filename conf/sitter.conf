# Project Sitter Configuration File
#
# The file is a basic list of variables "name = value"
#
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored
#
# DO NOT EDIT
#
# Instead create a file under
#
#    /etc/sitter/sitter.d/50-sitter.conf
#


# communicatord_listen=<url>
#
# The URL used to connect to the communicator daemon. Usually, it uses the
# 'cd' scheme (communicator daemon) and the path to the Unix socket of the
# communicator. You may also use any other open TCP or UDP port.
#
# Default: cd:///run/communicatord/communicatord.sock
communicatord_listen=cd:///run/communicatord/communicatord.sock


# statistics_period=<number of readings to cycle through>
#
# The period defines the duration for which the statistics are kept around.
# After that amount, new statistics overwrite old statistics.
#
# The minimum is 1 hour (3600)
#
# IMPORTANT: This value is currently rounded up to 1 hour, so you should use
#            a multiple of 3600 to make it easier to graps
#
# 1 week is 604800 seconds
#
# Default: 604800
#statistics_period=604800


# statistics_frequency=<interval between statistics gathering>
#
# The statistics frequency defines how often we read new data in seconds
#
# The minimum frequency is 1 minute (60 seconds)
#
# Default: 60
#statistics_frequency=60


# statistics_ttl=<how long to keep statistics in Cassandra>
#
# The statistics can also be saved in the Cassandra cluster. In that case,
# they are given a TLL in seconds representing the amount of time they will
# be kept in the database.
#
# Because of the way we save the data in the Cassandra cluster and the
# way the cluster is implemented, having a TTL will help greatly in not
# keeping all the data forever. However, Cassandra has a hard time with
# deleting old data, managing the tombstones can be a very slow process.
# This is why by default we currently keep this feature turned off.
#
# In most cases you want to use the same number as defined in the
# statistic_period parameter or a little more. Note, however, that
# this makes use of the Cassandra database in a way which is not very
# good for this kind of database. i.e. it will use it in a way similar to
# a queue. That means a table with a lot of tombstones which can be
# really bad as far as Cassandra is concerned.
#
# 1 week is 604800 seconds
#
# To turn off the feature, set the value to "off" (without the quotes)
# or to zero (`statistics_ttl=off` or `statistics_ttl=0`).
#
# To setup the TTL to the same value as the statistics_period whatever
# that value is, you can set this parameter to "use-period".
#
# Default: off
#statistics_ttl=off


# error_report_settle_time=<seconds before generating error reports by email>
#
# This parameter is used to determine the amount of time the sitter
# should wait before a report gets sent. It is quite often that when you
# first start a server, all things are not running as expected. Many
# services may take up to a couple of minutes to get settled as expected.
#
# The default is set to five minutes. That means the sitter server
# won't send any errors by email for that long. After that, it works as
# expected. The system accepts a minimum of one minute (60).
#
# Default: 300
#error_report_settle_time=300


# error_report_low_priority=<priority>[,<span>]
#
# The minimum priority an error has to have before we start sending emails.
# The default is 10. The minimum is 1. The maximum for this priority is 50.
#
# The span to wait between reports when errors only have a very low priority
# (i.e. between low priority and medium priority). This is one week by
# default, defined in seconds (86400 x 7). The minimum for <span> is one
# day (86400).
#
# The minimum span for low priority errors is one day. There is no maximum.
# Of course, really large numbers would likely prevent low priority errors
# from generating reports. If that's what you are trying to do, use a
# priority of 50 and keep the medium priority at 50. That way errors with
# a priority of 49 or less do not trigger the email report.
#
# Errors with a priority lower than this value are ignored when the sitter
# checks whether an email report should be sent or not. This minimum priority
# must be lower than the critical and medium priority levels.
#
# Default: 10,604800
#error_report_low_priority=10,604800


# error_report_medium_priority=<priority>[,<span>]
#
# Errors with a priority higher or equal to error_report_medium_priority
# and lower than error_report_critical_priority are send with a frequency of
# <span> seconds.
# 
# By default the medium priority is 50. The minimum is equal to the low
# priority (which by default is 10.) The maximum is equal to the critical
# priority.
#
# If this parameter's priority is set equal to the critical priority then
# the medium priority is ignored.
#
# The minimum <span> is one hour. The maximum is equal to the <span>
# defined in the error report low span parameter.
#
# Default: 50,259200
#error_report_medium_priority=50,259200


# error_report_critical_priority=<priority>[,<span>]
#
# Errors with a priority higher or equal to error_report_critical_priority
# are send with a frequency of <span> seconds.
# 
# By default the critical priority is 90. The minimum is equal to the medium
# priority (which by default is 50.) The maximum is 100. This means an error
# with a priority of 100 (the maximum possible priority) is always going to
# be considered critical.
#
# The minimum <span> is five minutes. The maximum is equal to the <span>
# defined in the error report medium span parameter.
#
# Default: 90,86400
#error_report_critical_priority=90,86400


# plugins_path=<path to the sitter plugins>
#
# This variable holds the path to the folder with the sitter plugins.
#
# If you are a developer, you may want to change this path to your
# developer BUILD directory.
#
# You can include multiple paths by separating them by spaces or colons.
#
# Default: /usr/lib/sitter/plugins
plugins_path=/usr/lib/sitter/plugins


# plugins=<name, name, ...>
#
# The list of sitter plugins to load to watch this server.
#
# * apt -- check status of packages
# * certificate -- check certificate of domains for renewal alerts
# * cpu -- check CPU load
# * disk -- check disk usage
# * firewall -- check that snapfirewall is running and the firewall is ON
# * flags -- check for flags that were raised by various sub-processes
# * log -- check the size, mode, uid, gid of log files
# * memory -- check memory/swap usage
# * network -- check network connectivity
# * packages -- check required, unwanted, conflicting packages
# * processes -- check that processes are running
# * reboot -- check whether the computer needs to be rebooted or not
# * scripts -- run various scripts
#
# WARNING: This "plugins" variable MUST be defined because there is
#          no internal defaults.
#
# Default: apt,cpu,disk,flags,log,memory,network,packages,processes,reboot,scripts
plugins=apt,cpu,disk,flags,log,memory,network,packages,processes,reboot,scripts


# data_path=<path to data directory>
#
# Path to where the sitter saves its gathered data while running.
# (counters, statistics, errors, etc.)
#
# By default, we set this variable to this path:
#
#     /var/lib/sitter
#
# However, the default when not set is the empty string which means:
# do not save the output anywhere.
#
# \li The general plugin data is saved under .../data
# \li The RUSAGE data is saved under .../rusage
#
# Default:
#data_path=/var/lib/sitter


# cache_path=<path to permanent cache>
#
# This variable is expected to be set to a full directory path that
# represents a permanent (durable) cache for the sitter daemon.
#
# At the moment it is used to save temporary data from various plugins,
# data that is required to persist between runs. However, that data is
# not so important that it could not get deleted once in a while. Remember
# that files that are over 1 month old get deleted from the cache folder.
#
# This path should be different from the library path (/var/lib/sitter)
# as the data saved here may safely be deleted and the server will recover
# the data in time.
#
# Default: /var/cache/sitter
#cache_path=/var/cache/sitter


# user_group=<user>:<group>
#
# Define the name of the user and group that should own the journal files.
#
# This is particularly useful for programmers who are very likely to end
# up with file ownership which match their own account and not the
# sitter account. In all other circumstances, the default should
# suffice for you.
#
# Default: sitter:sitter
#user_group=sitter:sitter


# from_email=<email address>
#
# Define the "From: ..." email when sitter is to send emails, which
# it does whenever it detects a problem (i.e. CPU clamped at 100%, heavy
# swapping, processes not running, processes running "forever", etc.)
#
# Until this email and administrator_email are both defined, no email will
# be sent by the sitter daemon.
#
# Default: <none> (but required for the email mechanism to work)
#from_email=


# administrator_email=<email address>
#
# The administrator email is the one address where problems discovered by
# the sitter daemon are sent. If you want multiple people to receive
# those emails, then create a list in postfix. For example, you could
# define an email such as `sitter-admins@example.com` and then forward
# emails sent to that address to all your administrators.
#
# Until this email and `from_email` are defined, no email will be sent
# by the sitter daemon.
#
# Default: <none> (but required for the email mechanism to work)
#administrator_email=


# disk_ignore=<partition regex>:...
#
# A list of colon separated regular expressions to ignore partitions for
# errors in link with filled up partitions (i.e. the "disk" plugin will
# generate errors once a partition is filled at 90% or more.)
#
# For example, we internally ignore partitions that match this regular
# expression:
#
#     "^/snap/core/"
#
# You can enter multiple regular expressions by separating them with a
# colon. If you need to support a colon in the regular expression, use
# the character escape "\072" instead.
#
# Default: <empty>
#disk_ignore=


# sitter_processes_path=<path>
#
# The path to the process definitions used to verify that this or that
# process is running. Other projects install files here.
#
# Default: /usr/share/sitter/processes
#sitter_processes_path=/usr/share/sitter/processes


# sitter_packages_path=<path>
#
# The path to the list of package definitions used to verify that certain
# packages are indeed installed or not installed (in conflict).
#
# Default: /usr/share/sitter/packages
#sitter_packages_path=/usr/share/sitter/packages


# vim: wrap
